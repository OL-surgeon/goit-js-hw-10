{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst datetimePicker = document.getElementById('datetime-picker');\nconst startButton = document.querySelector('[data-start]');\nconst daysEl = document.querySelector('[data-days]');\nconst hoursEl = document.querySelector('[data-hours]');\nconst minutesEl = document.querySelector('[data-minutes]');\nconst secondsEl = document.querySelector('[data-seconds]');\n\nlet userSelectedDate = null;\nlet timerInterval = null;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const selectedDate = selectedDates[0];\n\n    if (selectedDate < new Date()) {\n      iziToast.error({ message: 'Please choose a date in the future' });\n      startButton.disabled = true;\n    } else {\n      userSelectedDate = selectedDate;\n      startButton.disabled = false;\n    }\n  },\n};\n\nflatpickr(datetimePicker, options);\n\nconst addLeadingZero = value => String(value).padStart(2, '0');\n\nconst convertMs = ms => {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  return {\n    days: Math.floor(ms / day),\n    hours: Math.floor((ms % day) / hour),\n    minutes: Math.floor((ms % hour) / minute),\n    seconds: Math.floor((ms % minute) / second),\n  };\n};\n\nconst startTimer = () => {\n  if (!userSelectedDate) return;\n\n  startButton.disabled = true;\n  datetimePicker.disabled = true;\n\n  timerInterval = setInterval(() => {\n    const timeRemaining = userSelectedDate - new Date();\n    if (timeRemaining <= 0) {\n      clearInterval(timerInterval);\n      daysEl.textContent = '00';\n      hoursEl.textContent = '00';\n      minutesEl.textContent = '00';\n      secondsEl.textContent = '00';\n      datetimePicker.disabled = false;\n      return;\n    }\n\n    const { days, hours, minutes, seconds } = convertMs(timeRemaining);\n    daysEl.textContent = addLeadingZero(days);\n    hoursEl.textContent = addLeadingZero(hours);\n    minutesEl.textContent = addLeadingZero(minutes);\n    secondsEl.textContent = addLeadingZero(seconds);\n  }, 1000);\n};\n\nstartButton.addEventListener('click', startTimer);\n"],"names":["datetimePicker","startButton","daysEl","hoursEl","minutesEl","secondsEl","userSelectedDate","timerInterval","options","selectedDates","selectedDate","iziToast","flatpickr","addLeadingZero","value","convertMs","ms","startTimer","timeRemaining","days","hours","minutes","seconds"],"mappings":"0IAKA,MAAMA,EAAiB,SAAS,eAAe,iBAAiB,EAC1DC,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAS,SAAS,cAAc,aAAa,EAC7CC,EAAU,SAAS,cAAc,cAAc,EAC/CC,EAAY,SAAS,cAAc,gBAAgB,EACnDC,EAAY,SAAS,cAAc,gBAAgB,EAEzD,IAAIC,EAAmB,KACnBC,EAAgB,KAEpB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,MAAMC,EAAeD,EAAc,CAAC,EAEhCC,EAAe,IAAI,MACrBC,EAAS,MAAM,CAAE,QAAS,oCAAsC,CAAA,EAChEV,EAAY,SAAW,KAEvBK,EAAmBI,EACnBT,EAAY,SAAW,GAE1B,CACH,EAEAW,EAAUZ,EAAgBQ,CAAO,EAEjC,MAAMK,EAAiBC,GAAS,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,EAEvDC,EAAYC,IAMT,CACL,KAAM,KAAK,MAAMA,EAAK,KAAG,EACzB,MAAO,KAAK,MAAOA,EAAK,MAAO,IAAI,EACnC,QAAS,KAAK,MAAOA,EAAK,KAAQ,GAAM,EACxC,QAAS,KAAK,MAAOA,EAAK,IAAU,GAAM,CAC9C,GAGMC,EAAa,IAAM,CAClBX,IAELL,EAAY,SAAW,GACvBD,EAAe,SAAW,GAE1BO,EAAgB,YAAY,IAAM,CAChC,MAAMW,EAAgBZ,EAAmB,IAAI,KAC7C,GAAIY,GAAiB,EAAG,CACtB,cAAcX,CAAa,EAC3BL,EAAO,YAAc,KACrBC,EAAQ,YAAc,KACtBC,EAAU,YAAc,KACxBC,EAAU,YAAc,KACxBL,EAAe,SAAW,GAC1B,MACD,CAED,KAAM,CAAE,KAAAmB,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYP,EAAUG,CAAa,EACjEhB,EAAO,YAAcW,EAAeM,CAAI,EACxChB,EAAQ,YAAcU,EAAeO,CAAK,EAC1ChB,EAAU,YAAcS,EAAeQ,CAAO,EAC9ChB,EAAU,YAAcQ,EAAeS,CAAO,CAC/C,EAAE,GAAI,EACT,EAEArB,EAAY,iBAAiB,QAASgB,CAAU"}